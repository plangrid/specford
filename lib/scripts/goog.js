// Autogenerated by Specford.
var pg = null;
var Dom = require('../src/utils/dom');
var dom = new Dom;
var Tester = require('../src/utils/tester');
var test = new Tester(dom);
var colorizer = require('../src/utils/colorizer');
var Logger = require('../src/utils/logger');
var log = new Logger;
var steps = [
function(status) {
if(status !== 'success') log.unstamped('Network error', 'error');
else {
log.pgOpened();
test.start();
dom.clickSelector('body', 'a._Gs[href="//www.google.com/intl/en/policies/privacy/?fg=1"]');
test.after(steps.shift(), 'selectorExists', 'body', 'a[href="//myaccount.google.com/"]', 'undefined', 'undefined');
}},function() {
test.countExists('body', '.policy-pdf', 1, '');
test.stop();
slimer.exit();
}
];
var visit = function(url) {
if(pg) pg.close();
else {
pg = require('webpage').create();
dom.setPageRef(pg);
pg.viewportSize = { width: 800, height: 600 };
pg.onConsoleMessage = function(msg) {log.unstamped(msg, 'magenta');};
pg.onNavigationRequested = function(url, type) {log.stamped(('navigating to: ' + url), 'gray');};
pg.onError = function(msg, tr) { var stack = ['ERROR: ' + msg]; if (tr && tr.length) { stack.push('TRACE:'); tr.forEach(function(t) { stack.push(' -> ' + t.file + ': ' + t.line + (t.function ? ' (in function *' + t.function +'*)' : '')); }); } log.unstamped(stack.join('\n'), 'yellow'); };
}
log.pgOpening();
pg.open(url, steps.shift());
};
visit('http://google.com');
